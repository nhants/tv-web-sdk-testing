{"version":3,"sources":["App.js","index.js"],"names":["QrScanner","WORKER_PATH","qrEngine","createQrEngine","reusedCanvas","document","createElement","App","useState","result","setResult","className","multiple","type","onChange","e","files","target","i","file","canvas","objectUrl","URL","createObjectURL","img","Image","onload","imageWidth","width","imageHeight","height","revokeObjectURL","src","context","getContext","drawImage","this","imageData","getImageData","code","jsQR","data","inversionAttempts","res","name","scanImage","undefined","then","rQrScanner","catch","error","length","map","item","index","rootElement","getElementById","ReactDOM","render"],"mappings":"0MAKAA,IAAUC,YAAc,6CAExB,IAAMC,EAAWF,IAAUG,eAAeH,IAAUC,aAC9CG,EAAeC,SAASC,cAAc,UAE7B,SAASC,IACtB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KA8CA,OACE,sBAAKC,UAAU,MAAf,UACE,uBAAOC,UAAQ,EAACC,KAAK,OAAOC,SA/CT,SAACC,GAEtB,IADA,IAAQC,EAAUD,EAAEE,OAAZD,MADoB,WAEnBE,GACP,IAAMC,EAAOH,EAAME,GACbE,EAASf,SAASC,cAAc,UAChCe,EAAYC,IAAIC,gBAAgBJ,GAChCK,EAAM,IAAIC,MAChBD,EAAIE,OAAS,WACX,IAAMC,EAAaH,EAAII,MACjBC,EAAcL,EAAIM,OACxBV,EAAOQ,MAAQD,EACfP,EAAOU,OAASD,EAChBP,IAAIS,gBAAgBP,EAAIQ,KACxB,IAAMC,EAAUb,EAAOc,WAAW,MAClCD,EAAQE,UAAUC,KAAM,EAAG,GAC3B,IAAMC,EAAYJ,EAAQK,aACxB,EACA,EACAlB,EAAOQ,MACPR,EAAOU,QAQHS,EAAOC,IAAKH,EAAUI,KAAMJ,EAAUT,MAAOS,EAAUP,OAAQ,CACnEY,kBAAmB,eAEjBH,EACF7B,GAAU,SAACiC,GAAD,4BAAaA,GAAb,WAAqBxB,EAAKyB,KAA1B,aAAmCL,EAAKE,KAAxC,aAEVzC,IAAU6C,UAAUzB,OAAO0B,EAAW5C,EAAUE,GAC7C2C,MAAK,SAACC,GACLtC,GAAU,SAACiC,GAAD,4BAAaA,GAAb,WAAqBxB,EAAKyB,KAA1B,aAAmCI,EAAnC,aAEXC,OAAM,SAACC,GACNxC,GAAU,SAACiC,GAAD,4BAAaA,GAAb,WAAqBxB,EAAKyB,KAA1B,aAAmCM,YAIrD1B,EAAIQ,IAAMX,GAxCHH,EAAI,EAAGA,EAAIF,EAAMmC,SAAUjC,EAAI,EAA/BA,MA8CP,6BACGT,EAAO2C,KAAI,SAACC,EAAMC,GACjB,OAAO,6BAAiBD,GAARC,WCzD1B,IAAMC,EAAclD,SAASmD,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACnD,EAAD,MAEFgD,K","file":"static/js/main.94c44e97.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport jsQR from \"jsqr\";\nimport QrScanner from \"qr-scanner\";\n// import QrScannerWorker from \"qr-scanner/qr-scanner-worker.min\";\nimport \"./styles.css\";\nQrScanner.WORKER_PATH = 'qr-scanner/custom-qr-scanner-worker.min.js';\n\nconst qrEngine = QrScanner.createQrEngine(QrScanner.WORKER_PATH)\nconst reusedCanvas = document.createElement('canvas')\n\nexport default function App() {\n  const [result, setResult] = useState([]);\n  const handleOnChange = (e) => {\n    const { files } = e.target; // FileList object\n    for (let i = 0; i < files.length; ++i) {\n      const file = files[i];\n      const canvas = document.createElement(\"canvas\");\n      const objectUrl = URL.createObjectURL(file);\n      const img = new Image();\n      img.onload = function () {\n        const imageWidth = img.width;\n        const imageHeight = img.height;\n        canvas.width = imageWidth;\n        canvas.height = imageHeight;\n        URL.revokeObjectURL(img.src);\n        const context = canvas.getContext(\"2d\");\n        context.drawImage(this, 0, 0);\n        const imageData = context.getImageData(\n          0,\n          0,\n          canvas.width,\n          canvas.height\n        );\n\n        // document.body.appendChild(canvas);\n        // canvas.setAttribute('id', 'qr-canvas');\n        // const a = qrcode.decode();\n        // console.log('aaaaa', a);\n\n        const code = jsQR(imageData.data, imageData.width, imageData.height, {\n          inversionAttempts: \"dontInvert\" // dontInvert\n        });\n        if (code) {\n          setResult((res) => [...res, `${file.name}: ${code.data}}...`]);\n        } else {\n          QrScanner.scanImage(canvas,undefined, qrEngine, reusedCanvas)\n            .then((rQrScanner) => {\n              setResult((res) => [...res, `${file.name}: ${rQrScanner}.`]);\n            })\n            .catch((error) => {\n              setResult((res) => [...res, `${file.name}: ${error}`]);\n            });\n        }\n      };\n      img.src = objectUrl;\n    }\n  };\n  return (\n    <div className=\"App\">\n      <input multiple type=\"file\" onChange={handleOnChange} />\n      <ul>\n        {result.map((item, index) => {\n          return <li key={index}>{item}</li>;\n        })}\n      </ul>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}